                                          Mosh: AnInteractive Remote Shell for Mobile Clients
                                                         Keith Winstein and Hari Balakrishnan
                                   M.I.T. Computer Science and Artiﬁcial Intelligence Laboratory, Cambridge, Mass.
                                                               {keithw,hari}@mit.edu
                                         Abstract                                              Figure 1: Mosh in use.
                     Mosh (mobile shell) is a remote terminal application
                  that supports intermittent connectivity, allows roaming,
                  and speculatively and safely echoes user keystrokes for
                  better interactive response over high-latencypaths. Mosh
                  is built on the State Synchronization Protocol (SSP),
                  a new UDP-based protocol that securely synchronizes
                  client and server state, even across changes of the client’s
                  IP address. Mosh uses SSP to synchronize a character-
                  cell terminal emulator, maintaining terminal state at both
                  client and server to predictively echo keystrokes. Our
                  evaluation analyzed keystroke traces from six different
                  users covering a period of 40 hours of real-world us-
                  age.   Mosh was able to immediately display the ef-
                  fects of 70% of the user keystrokes. Over a commer-
                  cial EV-DO (3G) network, median keystroke response          mote servers feel more like the local computer, because
                  latency with Mosh was less than 5 ms, compared with         most keystrokes are reﬂected immediately on the user’s
                  503 ms for SSH. Mosh is free software, available from       display—even in full-screen programs like a text editor
                  http://mosh.mit.edu. It was downloaded more than            or mail reader.
                  15,000 times in the ﬁrst week of its release.                  These features are possible because Mosh operates at
                                                                              a different layer from SSH. While SSH securely con-
                  1    Introduction                                           veys an octet-stream over the network and then hands it
                                                                              off to a separate client-side terminal emulator to be inter-
                  Remoteterminalapplicationsarealmostasoldaspacket-           preted and rendered in cells on the screen, Mosh contains
                  switched data networks. The most popular such applica-      a server-side terminal emulator and uses a new protocol
                  tion today is the Secure Shell (SSH) [9], which runs in-    to synchronize terminal screen states over the network,
                  side a terminal emulator. Unfortunately, SSH has two        using the principle of application-layer framing [3].
                  major weaknesses that make it unsuitable for mobile            Because both the server and client maintain an image
                  use. First, because it runs over TCP, SSH does not sup-     of the screen state, Mosh can support intermittent con-
                  port roaming among IP addresses, or cope with intermit-     nectivity and local editing, and can adjust its network
                  tent connectivity while data is pending, and is almost      trafﬁc to avoid ﬁlling network buffers on slow links. As a
                  unusable over marginal paths with non-trivial packet        result, unlike in SSH, in Mosh“Control-C”alwaysworks
                  loss.  Second, SSH operates strictly in character-at-a-     to cease output from a runaway process within an RTT.
                  time mode, with all echoes and line editing performed          Mosh’s design makes two principal contributions:
                  by the remote host. On today’s commercial EV-DO and           1. State Synchronization Protocol: A new secure
                  UMTS(3G)mobilenetworks,round-trip latency is typi-               object synchronization protocol on top of UDP to
                  callyinthehundredsofmillisecondswhenunloaded,and                 synchronize abstract state objects in the presence
                  on both 3G and LTE networks, delays reach several sec-           of roaming, intermittent connectivity, and marginal
                  ondswhenbuffersareﬁlledbyaconcurrentbulktransfer.                networks (§2).
                  Such delays often make SSH painful for interactive use        2. Speculation: Mosh maintains the screen state at
                  onmobiledevices.                                                 both the server and client and uses the above pro-
                     This paper describes a solution to both problems.             tocol to synchronize them (§3). The client makes
                  We have built Mosh, the mobile shell, a remote ter-              guesses about the effect each new keystroke will
                  minal application that supports IP roaming, intermittent         have on the screen, and when conﬁdent renders the
                  connectivity, and marginal network connections. Mosh             effects immediately. The client veriﬁes its predic-
                  performs predictive client-side echoing and line editing         tions and can repair the screen state if necessary.
                  without any change to server software, and without re-         Wehave implemented Mosh in C++ and have exper-
                  gard to which application is running. Mosh makes re-        imented across various networks and across disconnec-
                                                                           1
                   tions (§4). Mosh is free software, distributed with a vari-     its security concerns are simpliﬁed. To bootstrap the ses-
                   etyofoperatingsystemsandathttp://mosh.mit.edu.                  sion, the user runs a script that logs in to the remote host
                   Moshwasdownloadedmorethan15,000timesinitsﬁrst                   using conventional means (e.g., SSH) and runs the un-
                   weekofreleaseinApril2012. AnexampleofMosh’sin-                  privileged server. This program listens on a high UDP
                   terface is shown in Figure 1.                                   port and prints out a random shared encryption key. The
                                                                                   system then shuts down the SSH connection and talks
                   2    State Synchronization Protocol                             directly to the server over UDP.
                                                                                      SSP is organized into two layers. A datagram layer
                   Moshworkstoconveythemostrecentstateofthescreen                  sends UDP packets over the network, and a transport
                   from server to client at a “frame rate” chosen based on         layer is responsible for conveying the current object state
                   network conditions. This allows the server to avoid ﬁll-        to the remote host.
                   ing up network buffers, because it does not need to send
                   every octet generated by the application. (The reverse          2.2    DatagramLayer
                   direction has less ﬂexibility because the client must send      The datagram layer maintains the “roaming” connec-
                   every keystroke to the server.)                                 tion. It accepts opaque payloads from the transport layer,
                      Supporting this is SSP, a lightweight secure datagram        prependsanincrementingsequencenumber,encryptsthe
                   protocol to synchronize the state of abstract objects be-       packet, and sends the resulting ciphertext in a UDP data-
                   tween a local node, which controls the object, and a re-        gram. It is responsible for estimating the timing char-
                   motehost that may be only intermittently connected.             acteristics of the link and keeping track of the client’s
                      A state-synchronization approach is appropriate for          current public IP address.
                   tasks like editing a document or using an e-mail or chat           The security of the system is built on AES-128 in the
                   application, which control the entire screen and provide        Offset Codebook (OCB) mode [5], which provides con-
                   their own means of navigation through a document or             ﬁdentiality and authenticity with a single secret key.
                   chat session. But it causes trouble for a task like “cat”-         To handle reordered and repeated packets, SSP relies
                   ing a large ﬁle to the screen, where the user might rely        on the principle of idempotency. Each datagram sent to
                   onhaving accurate history on the scrollback buffer.             the remote site represents an idempotent operation at the
                      Whenthesesemantics are a problem, the user can use           recipient—a “diff” between a numbered source and tar-
                   a pager such as less or more, or can use the screen or          get state. As a result, unlike Datagram TLS and Ker-
                   tmuxutilities, which are essentially pagers for the entire      beros, SSP does not need to maintain a replay cache or
                   terminal. Future versions of Mosh will allow the user to        other message history state, simplifying the design and
                   browse the scrollback history.                                  implementation.
                      The Mosh system runs SSP in each direction, instan-
                   tiated on two different kinds of objects. From client to        Client roaming. Every time the server receives an au-
                   server, the objects represent the history of the user’s in-     thentic datagram from the client with a sequence number
                   put. From server to client, the objects represent the con-      greater than any before, it sets the packet’s source IP ad-
                   tents of the terminal window.                                   dress and UDP port number as its new “target.” As a
                                                                                   result, client roaming happens automatically, without the
                   2.1     Protocol design goals                                   client’s timing out or even knowing that it has changed
                                                                                   public IP addresses.
                   SSP’s design goals were to:
                                                                                   Estimating round-trip time and RTT variation. The
                     1. Leverage existing infrastructure for authentication        datagram layer is also responsible for estimating the
                         and login, e.g., SSH.                                     smoothed round-trip time (SRTT) and RTT variation
                     2. Not require any privileged code.                           (RTTVAR)ofthe connection. Every outgoing datagram
                     3. At any time, take the action best calculated to fast-      containsamillisecondtimestampandanoptional“times-
                         forwardtheremotehosttothesender’scurrentstate.            tampreply,”containingthemostrecently-receivedtimes-
                     4. Accommodate a roaming client whose IP address              tampfromtheremotehost.
                         changes, without the client’s having to know that a          WeusethealgorithmofTCP[7]withthreechanges:
                         change has happened.
                     5. Recover from dropped or reordered packets.                   1. Because every datagram has a unique sequence
                     6. Ensure conﬁdentiality and authenticity.                          number, there is no ambiguity between the times-
                                                                                         tamps of retransmissions of the same payload.
                      Because SSP doesn’t use any privileged code or au-             2. SSPadjuststhe“timestampreply”bytheamountof
                   thenticate users, and key exchange happens out-of-band,               time since it received the corresponding timestamp.
                                                                                2
                           Therefore, policies like delayed ACKs do not affect             address translator. We chose an interval of 3 seconds
                           the accuracy of the RTT estimates.                              to compromise between responsiveness and the desire to
                       3. We reduce the lower limit on the retransmission                  reduce unnecessary chatter.
                           timeout to be 50 ms instead of one second. SSH
                           runs over TCP and rarely beneﬁts from fast re-                  3    A Remote Terminal with Speculative
                           transmissions, meaning it generally cannot detect a                  Local Echo
                           dropped keystroke in less than a second.
                     2.3     Transport Layer                                               To support the Mosh application, we implemented a ter-
                                                                                           minal emulator that obeys the SSP object interface. The
                     Thetransportlayersynchronizesthecontentsofthelocal                    client sends all keystrokes to the server, which applies
                     state to the remote host, and is agnostic to the type of              them and maintains the authoritative state of the termi-
                     objects sent and received.                                            nal, which it in turn synchronizes back to the client.
                                                                                             The client intelligently guesses the effect that
                     Transport sender behavior: The transport sender up-                   keystrokes will have on the terminal, and in most cases
                     dates the receiver to the current state of the object by              can speculatively apply such effects immediately. The
                     sending an Instruction: a self-contained message listing              client observes the success of its predictions to decide
                     the source and target states and the binary “diff” between            how conﬁdent to be and whether to display the predic-
                     them. This “diff” is a logical one, calculated by the ob-             tions to the user.
                     ject implementation. The ultimate semantics of the pro-                 Onhigh-delayconnections,weunderlineunconﬁrmed
                     tocol depend on the type of object, and are not dictated              predictions so the user doesn’t become misled.             This
                     by SSP. For example, for user inputs, the diff contains               underline trails behind the user’s cursor and disappears
                     every intervening keystroke, whereas for screen states, it            gradually as responses arrive from the server. Occasional
                     is only the minimal message that transforms the client’s              mistakescanberemovedwithinanRTTanddonotcause
                     frame to the current one.                                             lasting effect.
                     Transport sender timing: Because SSP can construct                    3.1    Implementingtheterminal emulator
                     a diff between any two object states, it is not required
                     to send every octet it receives from the host and can                 Mosh’s terminal emulator implements the subset of
                     modulate the “frame rate” based on network conditions.                the ISO/IEC 6429/ECMA-48 language [1] used by
                     The minimum interval between frames is set at half the                typical   terminal    emulators,     including    the   xterm,
                     smoothedRTTestimate,sothereisaboutoneInstruction                      gnome-terminal, Terminal.app, and PuTTY pro-
                                                             1
                     in ﬂight to the receiver at any time.                                 grams for X11, OS X, and Windows. This protocol was
                        As a result, when a process goes haywire and ﬂoods                 popularizedbyDigitalEquipmentCorp.inthe1970sand
                     the terminal, network buffers do not ﬁll up and increase              80s and speciﬁes a series of escape sequences to move
                     latency, so unlike in prior work, Control-C and other in-             the cursor, render characters in bold and colors, erase ar-
                     terrupt sequences continue to work.                                   eas of the screen, etc. The protocol is bidirectional, as
                        The transport sender uses delayed acks, similar to                 the host can query the terminal for its current character
                     TCP,tocutdownonexcesspackets. Inmorethan99.9%                         position and ask it to identify itself.
                     of cases in our experiments, a delay of 100 ms was sufﬁ-
                     cient to let the delayed ACK piggyback on host data.                  3.2    Speculative local echo
                        Theserveralsopausesfromtheﬁrsttimeitsobjecthas
                     changed before sending off an Instruction, because up-                Because Mosh operates at the terminal emulation layer
                     dates to the screen tend to clump together, and it would              and maintains the screen state at both the server and
                     be wasteful to send off a new frame with a partial update             client, it is possible for the client to make predictions
                     and then have to wait the full “frame rate” interval be-              about the effect of user keystrokes and later verify its
                     fore sending another. A collection interval of 8 ms was               predictions against the authoritative screen state coming
                     chosenasoptimalafteranalyzingapplicationtraces (§4).                  from the server.
                        SSP sends an occasional heartbeat to allow the server                Most Unix applications operate similarly in response
                     to learn when the client has roamed to a new IP address,              touserkeystrokes. Theyeitherechothekeyatthecurrent
                     and to allow the client to warn the user when it hasn’t               cursor location or not. As a result, it is possible to ap-
                     recently heard from the server. The heartbeat also keeps              proximate a local user interface for arbitrary remote ap-
                     the connection open when the client is behind a network               plications. We use this technique to boost the perceived
                        1We cap the maximum frame rate at 50 Hz, roughly the limit of      interactivity of a Mosh session over a high-latency net-
                     humanperception, to save unnecessary trafﬁc on low-latency paths.     workoronewithpacketloss.
                                                                                       3
                     Our general strategy is for the Mosh client to make           Our initial solution to this problem was a client-side
                   an echo prediction each time the user hits a key, but not     timeout, so that a prediction is not considered incor-
                   necessarily to display this prediction immediately.           rect until the corresponding keystroke has been acknowl-
                     The predictions are made in groups known as                 edged by the server and a certain amount of time has
                   “epochs,” with the intention that either all of the pre-      elapsed. Unfortunately, becauseofnetworkjitterthatcan
                   dictions in an epoch will be correct, or none will. An        delay the eventual echo beyond the timeout, this too pro-
                   epoch begins tentatively, making predictions only in the      duced an annoying number of false-negatives and result-
                   background. If any prediction from a certain epoch is         ing ﬂicker. (By contrast, setting the timeout long enough
                   conﬁrmedbytheserver,therestofthepredictionsinthat             to accommodate large amounts of jitter causes mistaken
                   epoch are immediately displayed to the user, along with       predictions to linger on the screen for too long.)
                   any future predictions in the same epoch.                       Ourﬁnalsolutionwastoimplementaserver-sidetime-
                     Someuserkeystrokesarelikelytoalterthehost’secho             out of 50 ms, chosen to contain the vast majority of le-
                   state from echoing to not, or are otherwise hard to pre-      gitimate application echoes on loaded servers, while still
                   dict, including the up- and down-arrow keys and control       fast enough to rapidly detect mistaken predictions. The
                   characters. These cause Mosh to lose conﬁdence and in-        terminal object that is synchronized to the client contains
                   crement the epoch, so that future predictions are made in     an“echoack”ﬁeld,representingthelatest keystroke that
                   the background again.                                         has been presented to the application for at least 50 ms
                     In practice, this approach accommodates a wide vari-        and whose effects ought to be reﬂected in the current
                   ety of application behaviors, including multi-mode edi-       screen. The client has no timeouts of its own, and con-
                   tors like vi (which sometimes echo conventionally and         sequently network jitter does not adversely affect the
                   sometimes don’t), and the possibility that the user might     client’s ability to evaluate whether a prediction is correct.
                   type a command at the prompt (e.g., passwd) that stops        The cost is increased network trafﬁc, because the server
                   server-side echoes after the ENTER key is typed.              often sends an extra datagram 50 ms after a keystroke to
                     Becausethedecisiontoperformlocalechoismadeen-               convey the echo ack.
                   tirely based on the application’s observed behavior, ap-        In practice, this has eliminated the ﬂicker caused by
                   plications need not be rewritten to accommodate local         false-negatives.
                   echo. Unlike prior work, Mosh’s local echo works even
                   with full-screen programs (like emacs) that put the ter-      4   Results
                   minal driver in “raw” mode and do their own echoing.
                     In typical use, Mosh can display immediately the ef-
                   fects of almost all “typing,” which constitutes more than     WeevaluatedMoshusingtracescontributedbysixusers,
                   two-thirds of user keystrokes in our captures. The re-        covering about 40 hours of real-world usage and includ-
                   maining keystrokes are principally “navigation” (such as      ing 9,986 total keystrokes.   These traces included the
                   “n”tomovetothenexte-mailmessageinamailreader),                timing and contents of all writes from the user to a re-
                   which cannot be predicted locally.                            mote host and vice versa. The users were asked to con-
                                                                                 tribute “typical, real-world sessions.”  In practice, the
                   Server-side assistance for prediction evaluation              traces include use of popular programs such as the bash
                     For the above algorithm to work properly, the Mosh          and zsh shells, the alpine and mutt e-mail clients, the
                   client must be able to reliably determine whether its         emacsandvimtexteditors,theirssiandbarnowlchat
                   echo predictions are correct. Early versions of Mosh at-      clients, the links text-mode Web browser, and several
                   tempted to do this with the client only, by simply exam-      programs unique to each user.
                   ining whether a predicted echo was present on the screen        To evaluate typical usage of a “mobile” terminal, we
                   by the time the Mosh server had acknowledged the cor-         replayed the traces over an otherwise unloaded Sprint
                   responding keystroke.                                         commercial EV-DO (3G) cellular Internet connection in
                     Unfortunately, in trials, we found that applications        Cambridge, Mass. A client-side process played the user
                   sometimes take tens of milliseconds after input is pre-       portion of the traces, and a server-side process waited for
                   sented to them before echoing to the screen. This can         the expected user input and then replied (in time) with
                   lead the Mosh server to acknowledge an input keystroke        the prerecorded server output. We sped up long periods
                   before the echo is present in the screen state, and causes    with no activity. The average round-trip time on the link
                   the client to conclude that its prediction was incorrect,     wasabouthalf a second.
                   even though the echo is on the way. This produces an-           Wereplayedthetraces over two different remote shell
                   noying ﬂicker as the echo is (mistakenly) removed from        applications, SSH and Mosh, and recorded the user inter-
                   the screen, then reinstated when it eventually arrives        face response latency to each simulated user keystroke,
                   from the server.                                              as seen by the user. The Mosh predictive algorithm and
                                                                              4
                       Figure 2: Cumulative distribution of keystroke response                     wait at least the frame-rate interval after a previous
                       times with Sprint EV-DO (3G) Internet service                               frame, and always wait at least the “collection interval”
                                                                                                   after receiving an initial write from the application. This
                          100                                                                      parameter represents a tradeoff: too short could cause
                           90                                                                      the server to send a tiny initial datagram and then wait
                                                                                                   before sending more data. But too long would hurt the
                           80        mean: 173 ms                                                  responsiveness of a typical session.
                           70                                                                         Theidealvaluedependsonhowoften,empirically,ap-
                           60                                     mean: 515 ms                     plications tend to wait between their writes. We had ini-
                           50 median: 5 ms                       median: 503 ms                    tially guessed that a value of 15 ms would be reasonable;
                                                                                                   based on the results and user feedback, we adjusted that
                        Percentage40                                                               to 8 ms, the minimum of the curve.
                           30                                                                      Predictive echo on other networks
                           20                                                                         After tuning the algorithm as discussed above, we
                           10                                                   Mosh               evaluated the same user traces replayed over a wireless
                             0                                                   SSH               Internet service loaded with a concurrent TCP download,
                               0          0.2          0.4          0.6          0.8           1 and a trans-oceanic wired link. Again, Mosh displayed
                                          Keystroke response time (seconds)                        about 70% of the keystrokes instantly, sometimes (but
                                                                                                   not always) increasing the variance in latencies seen by
                                                                                                   the user. We summarize these results as follows:
                       SSP were frozen prior to collecting the traces and were                        VerizonLTEserviceinCambridge,Mass.,running
                                                                                       2           oneconcurrent TCPdownload:
                       not adjusted in response to their contents or results.
                          The cumulative distributions               and     statistics    of                      Medianlatency          Mean       σ
                       keystroke response time are shown in Figure 2. When                              SSH        5.36 s                 5.03 s     2.14 s
                       Mosh was conﬁdent enough to display its predictions,                             Mosh       <0.005s                1.70 s     2.60 s
                       the response was nearly instant.            This occurred about                MIT-Singapore Internet path (to Amazon EC2
                       70%ofthe time. But many of the remaining keystrokes                         data center):
                       were “navigation,” such as moving to the next e-mail                                        Medianlatency          Mean        σ
                       message, and Mosh cannot make a prediction in these                              SSH        273ms                  272ms       9 ms
                       cases.     For keystrokes it could not predict, Mosh’s                           Mosh       <5ms                   86ms        132ms
                       latency distribution was similar to that of SSH.
                          Mosh displayed an erroneous prediction, which it                         Resilience to high packet loss
                       ﬁxed within an RTT, for 0.9% of the keystrokes. These                          Wealso tested SSP’s resilience to packet loss without
                       generally occurred because of word-wrap (characters                         the beneﬁt of predictive local echo. In general, SSP’s
                       that were printed near the end of a line get moved to the                   delay-based rate control and ability to skip intermediate
                       next line at an unpredictable time).                                        states allow it to handle links with non-congestive packet
                       Appropriateness of timing parameters                                        loss, which TCP was not designed to handle.
                          Wealso used the user traces to examine our choice of                        WesetupatestnetworkwithaLinux-basedrouter,us-
                       timing parameters for the SSP sender. Here, we assess                       ing the netem tool to create an artiﬁcial RTT of 100 ms
                       the choice for the “collection interval”: the pause time                    and a 29% probability of i.i.d. packet loss in each di-
                       after receiving a write from the host, in order to collect                  rection, resulting in 50% round-trip packet loss.                  As
                                                                                                   expected, TCP3 produces huge delays because of loss-
                       writes that may be following in close succession. We                        induced exponential backoffs:
                       disregard the possible beneﬁts of speculative local echo
                       and focus on network performance.                                                                               Median       Mean         σ
                          Figure 3 shows the artiﬁcial delay introduced by the                          SSH                            0.416 s      16.8 s       52.2 s
                       Mosh server on the applications’s screen updates in our                          Mosh(nopredictions)            0.222 s      0.329 s      1.63 s
                       traces. Recall that the server obeys two rules: always
                          2We subsequently “unfroze” and modiﬁed the Mosh algorithm in             5    Related Work
                       response to the data, including moving the collection interval to 8 ms      GNUscreen and OpenBSD tmux are popular “termi-
                       and adding the server-side timeout and “echo ack” feature to reduce
                       false-negative predictions on slow servers (§3.2). These changes im-        nal multiplexers” that allow the user to detach from and
                       proved Moshinreal-world use but would have little effect on this eval-
                       uation, because it used a long-delay link with an unloaded server.             3Linux 2.6.32 default TCP (cubic)
                                                                                               5
                   Figure 3: Average protocol-induced delay from varying          6   Conclusion
                   collection interval (with frame interval of 250 ms)            This paper presented the design, implementation, and
                      90                                                          evaluation of Mosh, a mobile shell that performs well
                                                                                  over marginal networks. Mosh handles intermittent con-
                      80                                                          nectivity and changes in IP addresses, and provides good
                                                           al                     interactive performance over long-delay network paths.
                    (ms)70                                 interv                 In our empirical evaluation of 40 hours of keystroke ac-
                                                                                  tivity from six users, we found that mean and median
                    delay60                                collection             response times were dramatically reduced on several dif-
                                                                                  ferent types of connections.    Mosh achieved this im-
                    erage50                                Mosh                   provement by accurately predicting the response to 70%
                    v                                                             of user keystrokes. Mosh’s wide adoption upon release
                    A                                                             suggests that it fulﬁlls a previously unmet need among
                      40                                                          mobile network users.
                      30                                                            SSPisarelativelyrareexampleofagracefully-mobile
                       0.1                1                10              100 networking protocol. Today, many programs intended
                               Collection interval after ﬁrst write (ms)          for mobility, including e-mail and chat programs on pop-
                                                                                  ular smartphones, cannot cope gracefully with roaming
                                                                                  and intermittent connectivity: the very conditions pre-
                                                                                  sented by mobile networks. We believe many of these
                   later reattach to a terminal session. (Graphical remote-       applications would beneﬁt from SSP’s design principles.
                   desktop programs, such as VNC, also allow reconnec-
                   tion.) screen and tmux provide several other features,         7   Acknowledgments
                   such as multiplexing and scrollback buffers, and are of-
                   ten used concurrently with Mosh.                               WethankNickolaiZeldovichandChrisLesniewski-Laas
                      REX[4]is a remote execution protocol built atop the         for helpful comments on this work. We also thank An-
                   Self-certifying File System [6]. It uses TCP, but provides     ders Kaseorg, Quentin Smith, Richard Tibbetts, Keegan
                   automatic roaming in some cases: when the client ﬁnds          McAllister,andtheuserswhoprovideduswithkeystroke
                   that a TCP connection aborts or a connection timeout oc-       traces. This work was supported in part by NSF grants
                   curs, it reinitiates the TCP connection and queues pend-       1040072and0721702.
                   ing data in the mean time. However, it could take several
                   minutesorlongerforaTCPconnectiontimeouttooccur,                References
                   especially if the client has no pending data of its own.
                      Mosh differs from terminal multiplexers and REX             [1] Control Functions for Coded Character Sets.   ECMA-
                   in that its roaming is immediate and automatic, using              48(1991); ISO/IEC 6429:1992.
                   application-level timers that assess the state of connec-      [2] D. Borman. Telnet linemode option. RFC 1116, 1990.
                   tivity end-to-end. Mosh is also distinct in that it skips      [3] D. Clark and D. Tennenhouse. Architectural Considera-
                   over intermediate screen states, even while connected, to          tions for a New Generation of Protocols. In SIGCOMM,
                   accommodatehigh-latency or loss-prone paths.                       1990.
                      Some BSD-style operating systems support the                [4] M. Kaminsky, E. Peterson, D. B. Gifﬁn, K. Fu,
                                                                                              `
                   LINEMODEoption[2]forTELNET,inwhichcharacter                        D. Mazieres, and M. F. Kaashoek. REX: Secure, Exten-
                   echoing and line editing is performed by the client. Un-           sible Remote Execution. In USENIX, June 2004.
                   fortunately, LINEMODE does not work with programs              [5] T. Krovetz and P. Rogaway. The software performance of
                   that put the terminal into “raw” mode, including shells            authenticated-encryptionmodes. In18thIntl.Conf.onFast
                   like bash, and full-screen applications like emacs, vi, or         Software Encryption, 2011.
                                                                                             `
                   pine. SSH does not have an equivalent of LINEMODE.             [6] D. Mazieres. Self-certifying File System. PhD thesis, Mas-
                      SUPDUP [8] included a Local Editing Protocol in                 sachusetts Institute of Technology, May 2000.
                   which an entire text editor session could be executed lo-      [7] V. Paxson, M. Allman, J. Chu, and M. Sargent. Computing
                   cally and uploaded to the server in batches. SUPDUP re-            TCP’sRetransmission Timer. RFC 6298, 2011.
                   quired the host application to encode its interactive func-    [8] R. M. Stallman. The SUPDUP Protocol. Technical report,
                   tionality in the SUPDUP language. Mosh does not re-                MITAIMemo644,1983.
                                                                                           ¨
                   quire modiﬁcations to host applications, but still handles     [9] T. Ylonen. SSH–secure login connections over the Inter-
                   most typing and cursor movement keystrokes.                        net. In 6th USENIX Security Symp., pages 37–42, 1996.
                                                                               6
