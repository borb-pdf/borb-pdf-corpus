                                              Analysis of the SSL 3.0 protocol
                                            David Wagner                               Bruce Schneier
                                University of California, Berkeley                 Counterpane Systems
                                       daw@cs.berkeley.edu                     schneier@counterpane.com
                  Abstract                                                 gives some background on SSL 3.0 and its predeces-
                                                                           sor SSL 2.0. Sections 3 and 4 explore several possible
                  The SSL protocol is intended to provide a practi-        attacks on the SSL protocol and oﬀer some technical
                  cal, application-layer, widely applicable connection-    discussion on the cryptographic protection aﬀorded
                  oriented mechanism for Internet client/server com-       by SSL 3.0; this material is divided into two parts,
                  munications security.   This note gives a detailed       with the SSL record layer analyzed in Section 3 and
                  technical analysis of the cryptographic strength of      the SSL key-exchange protocol considered in Sec-
                  the SSL 3.0 protocol. A number of minor ﬂaws in          tion 4. Finally, Section 5 concludes with a high-level
                  the protocol and several new active attacks on SSL       viewoftheSSLprotocol’sstrengthsandweaknesses.
                  are presented; however, these can be easily corrected
                  without overhauling the basic structure of the pro-
                  tocol. We conclude that, while there are still a few     2 Background
                  technical wrinkles to iron out, on the whole SSL 3.0
                  is a valuable contribution towards practical commu-      SSL is divided into two layers, with each layer us-
                  nications security.                                      ing services provided by a lower layer and provid-
                                                                           ing functionality to higher layers. The SSL record
                                                                           layer provides conﬁdentiality, authenticity, and re-
                  1 Introduction                                           play protection over a connection-oriented reliable
                                                                           transport protocol such as TCP. Layered above the
                  The recent explosive growth of the Internet and the      record layer is the SSL handshake protocol, a key-
                  World Wide Web has brought with it a need to se-         exchange protocol which initializes and synchronizes
                  curely protect sensitive communications sent over        cryptographic state at the two endpoints. After the
                  this open network. The SSL 2.0 protocol has be-          key-exchange protocol completes, sensitive applica-
                  come a de facto standard for cryptographic protec-       tion data can be sent via the SSL record layer.
                  tion of Web http traﬃc. But SSL 2.0 has several          SSL2.0hadmanysecurityweaknesseswhichSSL3.0
                  limitations—both in cryptographic security and in        aims to ﬁx. We brieﬂy describe a short list of the
                  functionality—so the protocol has been upgraded,         ﬂaws in SSL 2.0 which we have noticed. In export-
                  with signiﬁcant enhancements, to SSL 3.0. This new       weakened modes, SSL 2.0 unnecessarily weakens the
                  version of SSL will soon see widespread deployment.      authentication keys to 40 bits. SSL 2.0 uses a weak
                  The IETF Transport Layer Security working group          MACconstruction, although post-encryption seems
                  is also using SSL 3.0 as a base for their standards      to stop attacks. SSL 2.0 feeds padding bytes into the
                  eﬀorts. In short, SSL 3.0 aims to provide Internet       MACinblockciphermodes,butleavesthepadding-
                  client/server applications with a practical, widely-     length ﬁeld unauthenticated, which may potentially
                  applicable connection-oriented communications se-        allow active attackers to delete bytes from the end
                  curity mechanism.                                        of messages.    There is a ciphersuite rollback at-
                  This note analyzes the SSL 3.0 speciﬁcation              tack, where an active attacker edits the list of ci-
                  [FKK96], with a strong focus on its cryptographic        phersuite preferences in the hello messages to in-
                  security. We assume familiarity with the SSL 3.0         visibly force both endpoints to use a weaker form
                  speciﬁcation. Explanations of some of the crypto-        of encryption than they otherwise would choose;
                  graphic concepts can be found in [Sch96].                this serious ﬂaw limits SSL 2.0’s strength to “least
                                                                           common denominator” security when active attacks
                  The paper is organized as follows. Section 2 brieﬂy      are a threat. Others have also discovered some of
                  these weaknesses: Dan Simonindependentlypointed             information about protection sessions by examining
                  out the ciphersuite rollback attack, Paul Kocher            unencrypted packet ﬁelds and unprotected packet
                  has addressed these concerns [Koc96], and the PCT           attributes.  For example, by examining the unen-
                  1.0 protocol [PCT95] discussed and countered some           crypted IP source and destination addresses (and
                  (though not all) of these ﬂaws.                             even TCP ports), or examining the volume of net-
                                                                              work traﬃc ﬂow, a traﬃc analyst can determine
                                                                              what parties are interacting, what type of services
                  3 The record layer                                          are in use, and even sometimes recover information
                                                                              about business or personal relationships. In prac-
                                                                              tice, users typically consider the threat of this kind
                  This section considers the cryptographic strength of        of coarse-grained tracking to be relatively harmless,
                  the record layer protocol, and assumes that the key-        so SSL does not attempt to stop this kind of traf-
                  exchange protocol has securely set up session state,        ﬁc analysis. Ignoring coarse-grained traﬃc analysis
                  keys, and security parameters. Of course, a secure          seems like a reasonable design decision.
                  key-exchange protocol is vital to the security of ap-       However, there are some more subtle threats posed
                  plication data, but an examination of attacks on the        by traﬃc analysis in the SSL architecture. Bennet
                  SSL key-exchange protocol is postponed until the            Yeehasnotedthatexaminationofciphertextlengths
                  next section.                                               can reveal information about URL requests in SSL-
                  TheSSLrecordlayeraddressesfairly standard prob-             or SSL-encrypted Web traﬃc [Yee96]. When a Web
                  lems that have received much attention in the cryp-         browser connects to a Web server via an encrypted
                  tographic and security literature [KV83], so it is rea-     transport such as SSL, the GET request containing
                  sonable to hope that SSL 3.0 provides fairly solid          the URL is transmitted in encrypted form. Exactly
                  protection in this respect. As we shall see, this is        which Web page was downloaded by the browser
                  not far from the truth. We consider conﬁdentiality          is clearly considered conﬁdential information—and
                  and integrity protection in turn.                           for good reason, as knowledge of the URL is of-
                                                                              ten enough for an adversary to obtain the entire
                                                                              Web page downloaded—yet traﬃc analysis can re-
                  3.1     Conﬁdentiality: eavesdropping                       cover the identity of the Web server, the length of
                                                                              the URL requested, and the length of the html data
                  TheSSLprotocolencrypts all application-layer data           returned by the Web server. This leak could often al-
                  with a cipher and short-term session key negotiated         low an eavesdropper to discover what Web page was
                  by the handshake protocol. A wide variety of strong         accessed. (Note that Web search engine technology
                  algorithms used in standard modes is available to           is certainly advanced enough to catalogue the data
                  suit local preferences; reasonable applications should      openly available on a Web server and ﬁnd all URLs
                  be able to ﬁnd an encryption algorithm meeting the          of a given length on a given server which return a
                  required level of security, US export laws permit-          given amount of html data.)
                  ting. Key-management is handled well: short-term            This vulnerability is present because the ciphertext
                  session keys are generated by hashing random per-           length reveals the plaintext length.1 SSL includes
                  connection salts and a strong shared secret. Inde-          support for random padding for the block cipher
                  pendent keys are used for each direction of a con-          modes, but not for the stream cipher modes. We
                  nection as well as for each diﬀerent instance of a          believe that SSL should at the minimum support
                  connection. SSL will provide a lot of known plain-          the usage of random-length padding for all cipher
                  text to the eavesdropper, but there seems to be no          modes, and should also strongly consider requiring
                  better alternative; since the encryption algorithm is       it for certain applications.
                  required to be strong against known-plaintext at-
                  tacks anyway, this should not be problematic.
                  3.2     Conﬁdentiality: traﬃc analysis
                  When the standard attacks fail, a cryptanalyst will
                  turn to more obscure ones. Though often maligned,             1This is strictly speaking only true of stream ciphers, but
                  traﬃc analysis is another passive attack worth con-         they are currently the common case. With block ciphers,
                                                                              plaintexts are padded out to the next 8-byte boundary, so
                  sidering. Traﬃc analysis aims to recover conﬁdential        one can only recover a close estimate of the plaintext length.
                   3.3      Conﬁdentiality: active attacks                         for it in the clear, ready for capture by the eaves-
                                                                                   dropping attacker. Cut-and-paste attacks, in short,
                   It is important that SSL securely protect conﬁden-              enlist the unsuspecting receiver to decrypt and in-
                   tial data even against active attacks. Of course, the           advertently leak sensitive data for them.
                   underlying encryption algorithm should be secure                SSL 3.0 stops cut-and-paste attacks. One partial
                   against adaptive chosen-plaintext/chosen-ciphertext             defense against cut-and-paste attacks is to use in-
                   attacks, but this is not enough on its own. Recent              dependent session keys for each diﬀerent context.
                   research motivated by the IETF ipsec (IP security)              This prevents cutting and pasting between diﬀer-
                   working group has revealed that sophisticated active            ent connections, diﬀerent directions of a connection,
                   attacks on a record layer can breach a system’s conﬁ-           etc. SSL already uses independent keys for each di-
                   dentiality even when the underlying cipher is strong            rection of each incarnation of each connection. Still,
                   [Bel96]. It appears that the SSL 3.0 record layer re-           cutting and pasting within one direction of a transfer
                   sists these powerful attacks; it is worth discussing in         is not prevented by this mechanism. The most com-
                   some depth why they are foiled.                                 prehensive defense against cut-and-paste attacks is
                   One important active attack on ipsec is Bellovin’s              to use strong authentication on all encrypted pack-
                   cut-and-paste attack [Bel96]. Recall that, to achieve           ets to prevent enemy modiﬁcation of the ciphertext
                   conﬁdentiality, link encryption is not enough—the               data. TheSSLrecordlayerdoesemploythisdefense,
                   receiving endpoint mustalsoguardthesensitivedata                so cut-and-paste attacks are completely foiled. For a
                   from inadvertent disclosure. The cut-and-paste at-              more complete exposition on cut-and-paste attacks,
                   tack exploits the principle that most endpoint ap-              see Bellovin’s paper [Bel96].
                   plications will treat inbound encrypted data diﬀer-             The short-block attack is another active attack
                   ently depending on the context, protecting it more              against ipsec which can be found in Bellovin’s paper
                   assiduously when it appears in some forms than in               [Bel96]. The short-block attack was originally ap-
                   others.2 The cut-and-paste attack also takes advan-             plied against DES-CBC ipsec-protected TCP data
                   tage of a basic property of the cipher-block chaining           when the ﬁnal message block contains a short one-
                   mode: it recovers from errors within one block, so              byte plaintext and the remainder of it is ﬁlled by
                   transplanting a few consecutive ciphertext blocks be-           randompadding. Oneguessesattheunknownplain-
                   tween locations within a ciphertext stream results in           text byte by replacing the ﬁnal ciphertext block
                   a corresponding transfer of plaintext blocks, except            with another ciphertext block from a known plain-
                   for a one-block error at the beginning of the splice.           text/ciphertext pair.      Correct guesses can be rec-
                   In more detail, Bellovin’s cut-and-paste attack cuts            ognized by the validity of the TCP checksum: an
                   an encrypted ciphertext from some packet contain-               incorrect guess will cause the packet to be silently
                   ing sensitive data, and splices it into the ciphertext          dropped by the receiver’s TCP stack, but the cor-
                   of another packet which is carefully chosen so that             rect guess will cause a recognizable ACK to be re-
                   the receiving endpoint will be likely to inadvertently          turned. Knowledge of the corresponding plaintext
                   leak its plaintext after decryption. For example, if            for a correctly guessed replacement ciphertext block
                   cut-and-paste attacks on the SSL record layer were              enables the enemy to recover the unknown plaintext
                   feasible, they could be used to compromise site secu-           byte. Because the receiving ipsec stack ignores the
                   rity: a cut-and-paste attack on a SSL server-to-client          padding bytes, the short-block attack requires about
                   Webpagetransfercouldspliceciphertextfromasen-                   28 known plaintexts and 28 active online trials to re-
                   sitive part of that html transfer into the hostname             cover such an unknown trailing byte. Many distract-
                   portion of a URL included elsewhere in the trans-               ing technicalities have been signiﬁcantly simpliﬁed;
                   ferred Web page, so that when a user clicks on the              see Bellovin’s paper [Bel96] for more details.
                   booby-trappedURLlinkhisbrowserwouldinterpret
                   the decryption of the spliced sensitive ciphertext as           There are no obvious short-block attacks on SSL.
                   a hostname and send a DNS domain name lookup                    The SSL record layer format is rather similar to
                                                                                   the old vulnerable ipsec layout, so it is admittedly
                      2In the ipsec world, encrypted data to TCP user ports is     conceivable that a modiﬁed version of the attack
                   not protected by the operating system nearly as strongly as     might work against SSL. In any case, standard
                   encrypted data to the system TCP login or telnet port. For a    SSL-encrypting Web servers probably would not be
                   SSL-protected Web connection, the client browser will guard     threatened by a short-block type of attack, since
                   the path portion of a URL more carefully than the hostname      they do not typically encrypt short blocks. (Note,
                   portion, as the hostname portion may subsequently appear        however, that a SSL-encrypting telnet client should
                   unencrypted in DNS queries and IP source addresses, whereas
                   the path portion of a URL is encrypted via SSL.
                 demandparticularlyrobustprotectionagainstshort-        cial higher-level application-layer protocols.
                 block attacks, as each keystroke is typically sent in
                 its own one-byte-long packet.)
                 In summary, our analysis did not uncover any active    3.5    Replay attacks
                 attacks on the conﬁdentiality protection of the SSL    The naive use of a MAC does not necessarily stop
                 3.0 record layer.                                      an adversary from replaying stale packets. Replay
                                                                        attacks are a legitimate concern, and as they are
                                                                        so easy to protect against, it would be irresponsi-
                 3.4    Message authentication                          ble to fail to address these threats. SSL protects
                                                                        against replay attacks by including an implicit se-
                 In addition to protecting the conﬁdentiality of ap-    quence number in the MACed data. This mecha-
                 plication data, SSL cryptographically authenticates    nism also protects against delayed, re-ordered, or
                 sensitive communications. On the Internet, active      deleted data. Sequence numbers are 64 bits long, so
                 attacks are getting easier to launch every day. We     wrapping should not be a problem. Sequence num-
                 are aware of at least two commercially available soft- bers are maintained separately for each direction of
                 ware packages to implement active attacks such as      each connection, and are refreshed upon each new
                 IP spooﬁng and TCP session hijacking, and they         key-exchange, so there are no obvious vulnerabili-
                 even sport a user-friendly graphical interface. More-  ties.
                 over, the ﬁnancial incentive for exploiting commu-
                 nications security vulnerabilities is growing rapidly.
                 This calls for strong message authentication.          3.6    The Horton principle
                 SSL protects the integrity of application data by us-  Let’s recall the ultimate goal of message authenti-
                 ing a cryptographic MAC. The SSL designers have        cation. SSL provides message integrity protection
                 chosen to use HMAC, a simple, fast hash-based con-     just when the data passed up from the receiver’s
                 struction with some strong theoretical evidence for    SSLrecordlayertotheprotectedapplicationexactly
                 its security [BCK96]. In an area where several ini-    matches the data uttered by the sender’s protected
                 tial ad-hoc proposals for MACs have been cryptan-      application to the sender’s SSL record layer. This
                 alyzed, these provable security results are very at-   means, approximately, that it is not enough to ap-
                 tractive. HMAC is rapidly becoming the gold stan-      ply a secure MAC to just application data as it is
                 dardofmessageauthentication, anditisanexcellent        transmitted over the wire—one must also authenti-
                 choice for SSL. Barring major unexpected cryptan-      cate any context that the SSL mechanism depends
                 alytic advances, it seems unlikely that HMAC will      upon to interpret inbound network data. For lack of
                 be broken in the near future.                          a better word, let’s call this “the Horton principle”
                 WepointoutthatSSL3.0usesanolderobsoletever-            (with apologies to Dr. Seuss) of semantic authenti-
                 sion of the HMAC construction. SSL should move         cation: roughly speaking we want SSL to
                 to the updated current HMAC format when conve-              “authenticate what was meant, not what
                 nient, for maximal security.                                was said.”
                 On the whole, SSL 3.0 looks very secure against
                 straightforward exhaustive or cryptanalytic attacks    To phrase it another way,
                 on the MAC. SSL 2.0 had a serious design
                 ﬂaw in that it used an insecure MAC—though                  Eschew unauthenticated security-critical
                 post-encryption saved this from being a direct              context.
                 vulnerability—but SSL 3.0 has ﬁxed this mistake.
                 The SSL MAC keys contain at least 128 bits of en-      SSL 2.0 suﬀered from at least one ﬂaw along these
                 tropy, even in export-weakened modes, which should     lines: it included padding data but not the length of
                 provide excellent security for both export-weakened    the padding in the MAC input, so an active attacker
                 and domestic-grade implementations. Independent        could manipulate the cleartext padding length ﬁeld
                 keys are used for each direction of each connection    to compromise message integrity. An analysis check-
                 and for each new incarnation of an connection. The     ing SSL 2.0’s compliance with the Horton principle
                 choice of HMAC should stop cryptanalytic attacks.      would have uncovered this ﬂaw; therefore, we under-
                 SSL does not provide non-repudiation services, and     take an informal analysis of SSL 3.0 following the
                 it seems reasonable to deliberately leave that to spe- guidelines of the Horton principle.
                     Figure 1: Analysis of security-critical context        be authenticated; if not, it should not be present in
                                                                            the packet format. Also, it is worth mentioning that
                    encrypted fragment∗∗                                    the ﬁnal result of the inbound processing is a stream
                         ↓              [read key∗, read IV (1)]            of bytes from the application data stream, and mes-
                    padded compressed fragment                              sage boundaries are not preserved.      Any applica-
                         ↓                      [cipher type∗ (2)]          tion that relies on message boundaries—such as a
                    SSLCompressed.fragment                                  UDP-based program—will have to impose a higher-
                         ↓                  [CompressionMethod∗]            layer message length protocol on top of SSL. On
                    SSLPlaintext.fragment                                   the whole, though, our “Horton principle”-inspired
                         ↓                    [ContentType∗∗ (3),           analysis revealed no major weaknesses, to SSL 3.0’s
                         ↓                       ProtocolVersion,           credit.
                         ↓                SSLPlaintext.length∗∗]
                    “meaning”                                               3.7    Summary
                  Notes:                                                    In summary, the protection of application data by
                    ∗ session state synchronized by the key-exchange        the SSL record layer is, on the whole, quite good.
                      protocol.                                             The preceding section indicated a few small areas of
                   ∗∗ protected by the MAC.                                 concern, but they should be considered minor and
                                                                            the exception to the rule.
                  (1) read IV is initially taken from the session state,
                      then taken from the last ciphertext block of the
                      previous encrypted fragment.                          4 The key-exchange protocol
                  (2) for block ciphers, padding is removed from the        This section considers the security of the SSL hand-
                      end of the padded fragment.                           shake protocol as well as other SSL meta-data trans-
                                                                            port. The design of a secure key-exchange protocol
                                                                            is a thorny endeavor. There is a signiﬁcant amount
                  The SSL record layer depends on a lot of context          of complexity involved, so the discovery of a few
                  to interpret, decrypt, decompress, de-multiplex, and      weaknesses should not prove surprising. The follow-
                  dispatch data from the wire.     It is instructive to     ing analysis describes a number of shortcomings of
                  follow the chain of this processing of inbound net-       the SSL meta-data protection mechanisms, mostly
                  work data, catalogue all the security-critical context    in areas that have seen recent changes. The SSL 3.0
                  which this processing depends on, and check to en-        key-exchangeprotocolappearstobeasigniﬁcantad-
                  sure that the critical context has been authenticated.    vance over SSL 2.0, but it still bears a few scars from
                  This ensures that we have applied the MAC prop-           growing pains.
                  erly to all security-relevant items and fulﬁlled the
                  Horton principle. Because the encrypted fragment          4.1    Overview of the handshake ﬂow
                  ﬁeld is authenticated by the MAC, we will assume
                  that that ﬁeld is trustworthy, and follow its trans-      The SSL 3.0 handshake-protocol message ﬂow in-
                  formation into application data (“meaning”). The          volves client and server negotiating a common ci-
                  right-justiﬁed bracketed items in Figure 1 identify       phersuite acceptable to both parties, exchanging
                  security-critical context used in each step of process-   random nonces, and the client sending an encrypted
                  ing.                                                      master secret. Then each veriﬁes that their pro-
                  Figure 1 indicates that SSL 3.0 follows the Hor-          tocol runs match by authenticating all messages
                  ton principle fairly closely.    One minor excep-         with the master secret, and assuming that the
                  tion is that the integrity of the ProtocolVersion         check succeeds, both generate session keys from
                  ﬁeld is not protected.     (We refer speciﬁcally to       the master secret and proceed to send applica-
                  the SSLCiphertext.ProtocolVersion ﬁeld in the             tion data. The SSL protocol also includes a more
                  record layer, not the ClientHello.client version          lightweight session resumption protocol which al-
                  ﬁeld from the handshake protocol;         the latter      lows two parties who have already exchanged a
                  is protected, but the former is not.)          If the     master secret to generate updated session keys
                  ProtocolVersionﬁeldiseverusedbySSL,itshould               and start a new connection with those parameters.
                     4.2     Ciphersuite rollback attacks                                4.3      Dropping the change cipher spec
                                                                                                  message
                     TheSSL2.0key-exchange protocol contained a seri-                    One quirk of the SSL key-exchange protocol is that
                     ous ﬂaw: an active attacker could silently force a do-              the change cipher spec message is not protected
                     mestic user to use export-weakened encryption, even                 by the message authentication in the ﬁnished mes-
                     if both endpoints supported and preferred stronger-                 sage. This can potentially allow the cryptanalyst to
                     grade algorithms. This is known as a ciphersuite                    get a foot in the door. We recall the normal SSL
                     rollback attack, and it can be performed by editing                 message ﬂow:
                     the cleartext list of supported ciphersuites sent in
                     hello messages. SSL 3.0 ﬁxes this vulnerability by                           . . .
                     authenticating all the handshake protocol messages                           1.   C→S: [change cipher spec]
                     with the master secret, so such enemy tampering                              2.   C→S: [ﬁnished:]{a}k
                     can be determined at the end of the handshake and                            3.   S →C: [change cipher spec]
                     the session terminated if necessary.                                         4.   S →C: [ﬁnished:]{a}k
                                                                                                  5.   C→S: {m}
                     We describe the SSL 3.0 mechanism for prevent-                                                      k
                     ing modiﬁcation of handshake protocol messages in                            . . .
                     more detail. There are several generic vulnerabili-                 where{·} representsthekeyedcryptographictrans-
                     ties in this part of the SSL handshake protocol, so                            k
                     some introduction is in order. All the initial hand-                formsusedbytherecordlayer, mdenotesaplaintext
                     shake protocol messages are sent, unprotected, in                   message sent after the key-exchange is ﬁnished, and
                     the clear. Instead of modifying the parameters in                   a represents the ﬁnished message’s authentication
                     use at the moment, the key-exchange protocol mod-                   code, which is obtained by computing a symmet-
                     iﬁes a pending session state. After the negotiation                 ric MAC on the previous handshake messages (ex-
                     is complete, each party sends a short change ci-                    cluding the change cipher spec message). Note
                     pher spec message, which simply alerts the other                    that before the receipt of a change cipher spec
                     to upgrade the status of the pending session state to               message, the current ciphersuite oﬀers no encryp-
                     current. The new session state is used starting with                tion or authentication and the pending ciphersuite
                     the next message, though the change cipher spec                     includes the negotiated ciphersuite; upon receiving a
                     message is unprotected.3 Immediately following the                  change cipher spec message, implementations are
                     change cipher spec comes the ﬁnished message,                       supposed to copy the pending ciphersuite to the cur-
                     which contains a MAC on all the handshake pro-                      rent ciphersuite and enable cryptographic protection
                     tocol messages keyed by the master secret. (For                     in the record layer.
                     peculiar non-security reasons, the change cipher                    We describe an attack that takes advantage of the
                     spec and alert messages are not authenticated in                    lack of protection for change cipher spec mes-
                     the ﬁnished message.) The 48-byte master secret                     sages.   We assume the special case where the ne-
                     is never disclosed; instead, session keys are gener-                gotiated ciphersuite includes only message authen-
                     ated from it. This ensures that even if the session                 tication protection and no encryption. The active
                     keys are recovered, the master secret will remain                   attacker intercepts and deletes the change cipher
                     secret, so the handshake protocol messages will be                  spec messages, so that the two endpoints never up-
                     securely authenticated. The ﬁnished message is it-                  date their current ciphersuite; in particular, the two
                     self protected with the newly established ciphersuite.              endpoints never enable message authentication or
                     Neither party is supposed to accept application data                encryption in the record layer for incoming packets.
                     until it has received and veriﬁed a ﬁnished message                 Nowtheattackerallowstherestoftheinteraction to
                     from the other party.                                               proceed, stripping oﬀ the record layer authentication
                                                                                         ﬁelds from ﬁnished messages and session data. At
                                                                                         this point there is no authentication protection for
                                                                                         session data in eﬀect, and the active attacker can
                                                                                         modify the transmitted session data at will. The
                                                                                         impact is that, when an authentication-only trans-
                        3More precisely, it is protected with the old session state,     form is negotiated, an active attacker can defeat the
                     which initially is set up to provide no protection. The discus-     authentication protection on session data, transpar-
                     sion ignores the complicating case of a handshake protocol          ently causing both parties to accept incoming session
                     execution which changes cryptographic parameters on a con-
                     nection that already has some protection in eﬀect.                  data without any cryptographic integrity protection.
                    Wesummarize the attack ﬂow:                                        stated in the SSL speciﬁcation. We cannot fault such
                                                                                       clarity of vision. However, we settle for the observa-
                            . . .                                                      tion that at least one implementation has fallen for
                            1.    C→M: [change cipher spec]                            this pitfall. After performing the theoretical analy-
                            2.    C→M: [ﬁnished:]{a}
                                                                 k                     sis, we examined Netscape’s SSLRef 3.0b1 reference
                            2′.   M→S: [ﬁnished:]a                                     source code for SSL 3.0. Indeed, the necessary check
                            3.    S →M: [change cipher spec]                           is not made there; though we have not actually im-
                            4.    S →M: [ﬁnished:]{a}
                                                                 k                     plemented the attack, it appears that SSLRef 3.0b1
                            4′.   M→C: [ﬁnished:]a                                     will fall to a change cipher spec dropping attack
                            5.    C→M: {m}k                                            when an authentication-only ciphersuite is negoti-
                            5′.   M→S: m                                               ated.
                            . . .                                                      A more radical ﬁx would include the change ci-
                    Remember, in this ﬂow {m}k denotes the transmis-                   pher spec message in the the ﬁnished message’s
                    sion of a message m along with a message authenti-                 message authentication calculation. This would re-
                    cation ﬁeld keyed by k; given {m}k it is easy to strip             quire a change to the SSL speciﬁcation; however, it
                    oﬀ the MAC ﬁeld and recover {m}, since no encryp-                  also would have the advantage of being more robust
                    tion is in use here. Note that the attacker can easily             in face of implementation ﬂaws.
                    replace the unprotected session data m in ﬂow 5′ by                At the least, we recommend that future SSL docu-
                    forged data of his choice.                                         ments include a warning about this pitfall. Explic-
                    It is worth pointing out what happens when the ne-                 itness is a virtue.
                    gotiated ciphersuite includes encryption. Then the
                    client’s ﬁnished message is sent encrypted, but the                4.4      Key-exchange algorithm rollback
                    server expects to receive it unencrypted, so it does
                    not suﬃce to strip oﬀ the MAC ﬁeld—instead, the                    The SSL 3.0 handshake protocol also contains
                    attacker must recover the encryption key k and de-                 another design ﬂaw.           A server can send short-
                    crypt {a}k to obtain a. Therefore the attack will                  lived public key parameters, signed under its long-
                    be foiled when the negotiated ciphersuite includes                 term certiﬁed signing key, in the server key ex-
                    strong encryption. In the intermediate case where                  change message. Several key-exchange algorithms
                    weak encryption (such as a 40-bit exportable mode)                 are supported, including ephemeral RSA and Diﬃe-
                    is used, the attacker may be able to carry out this                Hellman public keys. Unfortunately, the signature
                    attack if it possible to perform an online exhaustive
                    keysearch to recover the short encryption key.4 In                 on the short-lived parameters does not protect the
                    all fairness, real-time online exhaustive keysearch of             ﬁeld which speciﬁes which type of key-exchange al-
                    a 40-bit cipher is currently out of reach for many ad-             gorithm is in use. Note that this violates the Horton
                    versaries, although advances in computation power                  principle: SSL should sign not just the public pa-
                    may make it a more serious threat in the future.                   rameters but also all data needed to interpret those
                                                                                       parameters.
                    ThesimplestﬁxistorequirethataSSLimplementa-                        For convenience, we reprint the relevant SSL 3.0
                    tion receive a change cipher spec message before                   data structures from the the server key exchange
                    accepting a ﬁnished message. Some readers might                    message here.
                    complain that this requirement ought to be obvious
                    with a moment’s reﬂection, even if it is not explicitly
                                                                                       enum { rsa, diffie_hellman, ... }
                       4A note about the amount of known plaintext available is                             KeyExchangeAlgorithm;
                    in order. When a block cipher mode (such as 40-bit RC2 or          struct {
                    40-bit DES) is in use, there will be 4 bytes of known plain-
                    text in the header of the ﬁnished message and another 4–8               opaque rsa_modulus;
                    bytes in the padding ﬁelds, so enough known text is available.          opaque rsa_exponent;
                    For unpadded 40-bit stream cipher modes, there is only the         } ServerRSAParams;
                    4 bytes of known plaintext in the ﬁnished message header;          struct {
                    if the client immediately sends encrypted session data after
                    sending the ﬁnished message (as is allowed in Section 7.6.9             opaque dh_p;
                    of the SSL 3.0 speciﬁcation) then enough additional known               opaque dh_g;
                    plaintext will probably be available to uniquely recover the            opaque dh_Ys;
                    stream cipher key; otherwise, about 28 possible 40-bit keys
                    will be suggested, and the attacker must settle for a 2−8          } ServerDHParams;
                    chance of success.                                                 struct {
                      select (KeyExchangeAlgorithm) {                         ﬂow (omitting many irrelevant ﬁelds and messages):
                           case diffie_hellman:
                                   ServerDHParams params;                         [client hello:]
                                   Signature signed_params;                       1.   C→M: SSLRSA...
                                                                                   ′
                           case rsa:                                              1 .  M→S: SSLDHERSA...
                                   ServerRSAParams params;                        [server hello:]
                                   Signature signed_params;                       2.   S →M: SSLDHERSA...
                                                                                   ′
                      }                                                           2 .  M→C: SSLRSA...
                  } ServerKeyExchange;                                            [server key exchange:]
                                                                                  3.   S →M: {p,g,y}K ,diffie hellman
                                                                                                              S
                                                                                   ′
                  The signed params ﬁeld contains the server’s sig-               3 .  M→C: {p,g,y}K ,rsa
                                                                                  [client key exchange:] S
                  nature on a hash of the relevant ServerParams
                  ﬁeld,   but the signature does not cover the                    4.   C→M: kgmodp
                                                                                   ′                 x
                  KeyExchangeAlgorithm value. Therefore, by mod-                  4 .  M→S: g modp
                  ifying the (unprotected) KeyExchangeAlgorithm                   . . .
                  ﬁeld, we can abuse the server’s legitimate signa-
                  ture on a set of Diﬃe-Hellman parameters and fool           At the end of the key-exchange, the client’s value of
                  the client into thinking the server signed a set of         the pre master secret is k, while the server’s value
                  ephemeral RSA parameters.                                   is gxy mod p where x was chosen by the attacker M;
                  We should point out that particularly cautious im-          of course, both of these are known to the attacker
                  plementation might not be fooled by such tricks,            M, and all secrets are derived from these values,
                  if they check the length of the ServerParams ﬁeld           so all subsequent cryptographic transforms oﬀer no
                  carefully.  For example, SSLRef 3.0b1 is paranoid           protection against M.
                  enough that it would detect such an attack. How-
                  ever, in general, the speciﬁcation is silent on the         4.5     Replay attacks on anonymous
                  matter, and some compliant implementations could                    key-exchange
                  easily be vulnerable.
                  If the implementation can be fooled, an active attack       There is another similar, but lesser, design ﬂaw in
                  can be constructed. Perform a ciphersuite rollback          the server key exchange message. The standard
                  attack to coerce the server into using the ephemeral        key-exchange algorithms bind the signature on the
                  Diﬃe-Hellman key exchange algorithm.            Modify      short-lived cryptographic parameters to the connec-
                  the server key exchange message, changing the               tion by hashing with server and client nonces, but
                  KeyExchangeAlgorithm ﬁeld to select ephemeral               due to some oversight, anonymous key-exchanges
                  RSA key-exchange but leaving the ServerParams               do not perform this binding.        Therefore, if one
                  ﬁeld and the server’s signature untouched. Unless           can convince a server to perform one anonymous
                  implementors are exceptionally foresighted or para-         key-exchange, then one will be able to spoof the
                  noid, the server’s Diﬃe-Hellman prime modulus p             server in all future sessions that use anonymous key-
                  (dh p) and generator g (dh g) will probably be in-          exchanges. Any client that will accept an anony-
                  terpreted by the client as a correctly signed short-        mous key-exchange (even if it does not suggest it
                  lived RSA modulus p (rsa modulus) with exponent             in the client hello ciphersuite negotiation) is then
                  g (rsa exponent). Watch as the client encrypts the          vulnerable to such spooﬁng. To stop this attack, the
                  pre master secret with the bogus RSA values. In-            server’s signature on the anonymous key-exchange
                  tercept the RSA encrypted value kg mod p; recover           parameter should indicate that the server is willing
                  k, the PKCS encoding of the pre master secret,              to accept anonymous key exchange and be vulner-
                  by taking g-th roots, which can be done eﬃciently           able to man-in-the-middle attacks, and this signa-
                  since p is prime. Now that the pre master secret            ture should be bound to the current session. This
                  is compromised, it is easy to spoof the rest of the         requires binding that signature to the connection-
                  key exchange, including forging ﬁnished messages,           speciﬁc random nonces.
                  to both endpoints. Thereafter one can decrypt all           For clarity, we reprint the relevant SSL data struc-
                  the sensitive application data transmitted or forge         tures:
                  fake data on that SSL connection; all cryptographic
                  protection has been wholly defeated.                        digitally-signed struct {
                  We summarize this attack in the following attack                select (SignatureAlgorithm) {
                          case anonymous: struct { };                   countermeasure is a very clever approach. However,
                          case rsa:                                     there are still a few little vulnerabilities to be worked
                                opaque md5_hash[16];                    out.
                                ...                                     First, the success of the countermeasure depends
                    }                                                   vitally on the assumption that SSL 2.0 will only
                 } Signature;                                           support RSA key-exchange; non-RSA public key-
                 md5_hash = MD5(ClientHello.random                      exchange algorithms will not admit the special
                  + ServerHello.random + ServerParams);                 padding redundancy, so version rollback attacks can
                 Note that, in the case of an anonymous key-            not be detected if the server supports non-RSA key-
                 exchange, the signature is over an empty structure;    exchange methods while operating in SSL 2.0 mode.
                 the signature does not include ClientHello.random      In fact, this assumption can be violated in servers
                 or ServerHello.random and thus is not bound to         which support both SSL 2.0 and SSL 3.0. The SSL
                 the current session. Therefore, once an attacker has   3.0 speciﬁcation optionally allows servers which sup-
                 collected one anonymous Signature structure from       port SSL 2.0 backwards compatibility to accept SSL
                 a server, the attacker can spoof the server in fu-     3.0 ciphersuites in SSL 2.0 client hello messages.
                 ture sessions and replay the old Signature structure   Weillustrate a possible attack ﬂow on such a server:
                 without detection.
                 Thekey-exchangealgorithmrollbackattackandthis              [client hello:]
                 replay attack serve to illustrate the dangers of a ﬂex-    1.  C→M: v3.0,SSL RSA ...
                                                                             ′
                 ible ciphersuite negotiation algorithm. It is possible     1 . M→S: v2.0,SSL DHE ...
                 to end up with “least common denominator secu-             [server hello:]
                 rity”, where SSL is only as secure as the weakest          2.  S →C: v2.0, SSL DHE ...
                 keyexchangealgorithm(orweakestciphersuite)sup-             [server key exchange:]
                                                                            3.  S →C: {p,g,y}K ,diffie hellman
                 ported.                                                    [client key exchange:] S
                                                                            4.  C→S: {p,g,x},diffie hellman
                 4.6    Version rollback attacks                            . . .
                 SSL 3.0 implementations will likely be ﬂexible         Here two endpoints which support both SSL 3.0 and
                 enough to accept SSL 2.0 connections, at least in      SSL 2.0 have been transparently forced to revert to
                 the short-term. This threatens to create the poten-    the SSL 2.0 protocol. Moreover, neither endpoint
                 tial for version rollback attacks, where an opponent   is allowed to learn that the other endpoint supports
                 modiﬁes the client hello to look like a SSL 2.0 hello  SSL 3.0, since RSA key-exchange has been avoided.
                 messageandproceedstoexploitanyofthenumerous            Nowtheactive attacker can exploit any of the many
                 SSL 2.0 vulnerabilities.                               attacks on SSL 2.0, such as ciphersuite rollback at-
                                                                        tacks, taking advantage of the weak message authen-
                 Paul Kocher designed a fascinating strategy to de-     tication found in SSL 2.0, etc. This is not good.
                 tect version rollback attacks on SSL 3.0. Client im-   Second, a potential vulnerability arises from mix-
                 plementations which support SSL 3.0 embed some         ing SSL versions across resumed sessions. The spec-
                 ﬁxed redundancy in the (normally random) RSA           iﬁcation does not forbid or discourage SSL 2.0-
                 PKCS padding bytes to indicate that they support       compatible SSL servers from accepting a SSL 2.0
                 SSL3.0. ServerswhichsupportSSL3.0willrefuseto          client hello request to resume a session which was
                 accept RSA-encrypted key-exchanges over SSL 2.0-       originally initiated with SSL 3.0. After resuming a
                 compatibility connections if the RSA encryption in-    SSL3.0-created session with SSL 2.0, the attacker is
                 cludes those distinctive non-random padding bytes.     free to perform any of the numerous SSL 2.0 ac-
                 Thisensuresthataclientandserverwhichbothsup-           tive attacks, such as ciphersuite rollback.  If the
                 port SSL 3.0 will be able to detect version rollback   original SSL 3.0 session included client authentica-
                 attacks which try to coerce them into using SSL 2.0.   tion, this allows an attacker to spoof the client: the
                 Moreover, old SSL 2.0 clients will be using random     attacker rolls back to SSL 2.0 via session resump-
                 PKCS padding, so they will still work with servers     tion, rolls back to an export-weakened ciphersuite,
                 that support SSL 2.0.                                  exhaustively recovers the 40 bit key through brute
                 The goal is to detect when both sides support SSL      force, and takes advantage of the SSL 2.0 weakness
                 3.0 even in the face of active attacks. Paul Kocher’s  that MAC keys are 40 bits long in export-weakened
                 modes to forge data and spoof the victim client to              Figure 2: master secret usage
                 the server.                                            message    usage
                 Weillustrate the ﬁrst attack ﬂow:                      certiﬁcate verify
                    [client hello:]                                                hash = adhoc-MAC(master secret,
                    1.  C→S: v3.0,create new session                               handshake messages)
                    [server hello:]                                     ﬁnished
                    2.  S →C: v3.0, created                                        hash = adhoc-MAC(master secret,
                                                                                   handshake messages + sender)
                    [client hello:]                                     change cipher spec
                    3.  M→S: v2.0,resume previous session                          key block = expand-keys(
                    [server hello:]                                                master secret,
                    4.  S →M: v2.0, resumed                                        ServerHello.random +
                                                                                   ClientHello.random, ...)
                 Inthemoresophisticatedsecondattack, theattacker
                 replaces messages 3 and 4 with a ciphersuite rollback master secret, and the protection against tamper-
                 attack on SSL 2.0:                                    ing with the SSL handshake protocol relies heavily
                    [client hello:]                                    on the secrecy of the master secret. Therefore, it
                    3′. M→S: v2.0,resume previous session,             is important that the master secret be especially
                          SSL RC4 128 EXPORT40 WITH MD5                heavily guarded. In protocol design, this means that
                    [server hello:]                                    usage of the master secret should be greatly lim-
                    4′. S →M: v2.0, resumed,                           ited.
                          SSL RC4 128 EXPORT40 WITH MD5                Figure  2 lists   all of  the  places  where the
                    [M recovers 40-bit MAC and RC4 keys k]             master secret is used.     Each item in the list
                    5′. M→S: {m}k                                      can be used to recover a relation involving the
                     ′                ′
                    6 . S →M: {m}k                                     master secret and some known plaintext.
                 Here m represents fake session data chosen by M;      An enemy can collect unlimited amounts of known
                 recall that SSL 2.0 used 40-bit MAC keys in export-   plaintext for the master secret-keyed MAC trans-
                 weakened modes, so a simple 40-bit exhaustive         formation found in the ﬁnished message. The in-
                 search recovers all the record layer keys and lets M  formed adversary opens many simultaneous connec-
                 forge the authentication and encryption. The server   tions via client hello messages requesting the re-
                 accepts the forgery {m} as a valid message. The       sumption of the targeted session. For each such con-
                                         k
                 server may also send back a conﬁdential response      nection, the server will pick a random nonce, calcu-
                 {m′}k, and of course M can decrypt and recover the    late a MAC with the master secret, and send it
                 plaintext m′. Therefore all cryptographic protection  back encrypted in a ﬁnished message. The clever
                 has been compromised in this scenario.                adversary should leave all those connections open
                 These attacks do not necessarily represent a funda-   without responding to the server’s ﬁnished mes-
                 mental limitation of SSL backwards compatibility.     sage: sending incorrect data on any of the connec-
                 It seems that they can be ﬁxed with minor changes     tions will cause a fatal alert which makes the ses-
                 to the speciﬁcation: servers supporting both SSL 2.0  sion unresumable. In this way, the opponent can
                 and SSL 3.0 should not let clients mix SSL versions   collect great amounts of known plaintext hashed
                 across session resumption and should not support      with the master secret. If some cryptanalyst dis-
                 non-RSA key-exchange algorithms in SSL 2.0 com-       covers an attack on adhoc-MAC() which uses much
                 pability mode. In any case, the right long-term ﬁx    known plaintext to recover the secret key, the cur-
                 is for servers to stop accepting SSL 2.0 connections. rent SSL protocol could become unsafe. A strongly
                                                                       robust handshake protocol should probably limit the
                                                                       amount of known text that is available to a crypt-
                 4.7   Safeguarding the master secret                  analyst.
                                                                       The pre master secret is at least as important to
                 Ensuring that the master secret remains truly         protect.  One way that an attacker may acquire
                 secret is tremendously important to the security      more known text hashed with a pre master secret
                 of SSL. All session keys are generated from the       is to replay the original RSA-encrypted ciphertext
                  which contained the pre master secret. The at-           4.10     MACusage
                  tacker will not be able to complete the SSL hand-
                  shake protocol with this replayed RSA ciphertext,        The SSL 3.0 handshake protocol uses several ad-
                  but it may be possible to get the server to send a       hocMACconstructionstoprovidemessageintegrity.
                  ﬁnished message containing some known plaintext          Thesecurity of these MACs has not been thoroughly
                  hashed with the pre master secret. This will only        evaluated. We believe that SSL 3.0 should consis-
                  be possible if the server is pipelined enough to send    tently use HMAC whenever a MAC is called for;
                  a ﬁnished message after receiving the client key         ad-hoc MACs should be avoided.
                  exchangemessage but before receiving a client ﬁn-
                  ished message. This trick would be impossible if
                  the client’s and server’s random nonces were bound       4.11     Summary
                  more tightly to the pre master secret in the RSA
                  key-exchange—perhaps a hash of the nonces should         The SSL handshake protocol has several vulnera-
                  be included in the RSA encryption input.                 bilities and worrisome features, especially in areas
                                                                           whichhaveseenrecentrevision. Theseareonlytrou-
                                                                           blesome when active attacks are a concern. Further-
                                                                           more, these are not universal weaknesses: diﬀerent
                                                                           implementations may or may not be vulnerable. A
                  4.8    Diﬃe-Hellman key-exchange                         ﬂawinaprotocoldoesnotnecessarilyyieldavulner-
                                                                           able implementation. Nonetheless, if the speciﬁca-
                                                                           tion does not explicitly warn of an attack (or prevent
                  SSL 3.0 includes support for ephemerally-keyed           it directly), it seems reasonable to oﬀer constructive
                  Diﬃe-Hellman key-exchange. Since Diﬃe-Hellman            criticism.
                  is the only public key algorithm known which can
                  eﬃciently provide perfect forward secrecy, this is
                  an excellent addition to SSL. In a SSL 3.0 Diﬃe-         5 Conclusion
                  Hellman key-exchange, the server speciﬁes its Diﬃe-
                  Hellman exponent as well as the prime modulus and        This security analysis has dedicated the greatest
                  generator. To avoid server-generated trapdoors, the      amount of time to shortcomings of the SSL 3.0 pro-
                  client should be careful to check that the modulus       tocol, but that was purely for reasons of exposi-
                  and generator are from a ﬁxed public list of safe        tion. One would be hard-pressed to ﬁnd any cor-
                  values. The well-known man-in-the-middle attack is       relation between the amount of space required to
                  prevented in SSL 3.0 by requiring the server’s Diﬃe-     explain a technical point and its importance or sever-
                  Hellman exponential to be authenticated. (Anony-         ity. Therefore, it is worth putting the previous sec-
                  mous clients are not required to possess a certiﬁ-       tions in perspective, reviewing the big picture, and
                  cate.) There is no support for higher-performance        summarizing the security of SSL 3.0.
                  variants of Diﬃe-Hellman, such as smaller (160-bit)
                  exponents or elliptic curve variants.                    In general SSL 3.0 provides excellent security against
                                                                           eavesdropping and other passive attacks. Although
                                                                           export-weakened modes oﬀer only minimal conﬁden-
                                                                           tiality protection, there is nothing SSL can do to
                                                                           improve that fact. The only change to SSL’s protec-
                  4.9    The alert protocol                                tion against passive attacks worth recommending is
                                                                           support for padding to stop traﬃc analysis of GET
                  SSL includes a small provision for sending event-        request lengths.
                  driven alert messages. Many of these indicate fa-        Thisanalysis has revealed a number of active attacks
                  tal error conditions and instruct the recipient to im-   on the SSL 3.0 protocol (though some implemen-
                  mediately tear down the session. For instance, the       tations may not be vulnerable). The most impor-
                  close-notify alert message indicates that the sender     tantnewattacksarechangecipherspec-dropping,
                  is ﬁnished sending application data on the connec-       KeyExchangeAlgorithm-spooﬁng, and version roll-
                  tion; since alert messages are normally authenti-        back. The SSL speciﬁcation should be changed to
                  cated, this prevents a truncation attack. As another     warn of these new attacks. Fortunately, it is not
                  example, reception of any packet with an incorrect       hard to patch up the small ﬂaws which allowed these
                  MACwill result in a fatal alert.                         attacks, and several possible ﬁxes were listed.
                 The analysis has also revealed several ways in which     [FKK96]    A. Freier, P. Karlton, and P. Kocher,
                 the robustness of the SSL protocol can be improved.                 “The    SSL Protocol      Version   3.0”,
                 Many remarks were not inspired by direct vulner-                    ftp://ftp.netscape.com/pub/review/
                 abilities, but still are worth considering for future               ssl-spec.tar.Z, March 4 1996, Inter-
                 versions of SSL. Many of the pitfalls in SSL 3.0 were               net Draft, work in progress.
                 found in areas that have seen recent revision.           [Koc96]    P. Kocher, personal communication,
                 It is important not to overstate the practical signiﬁ-              1996.
                 cance of any of these ﬂaws. Most of the weaknesses
                 described in this note arise from a small oversight      [KV83]     V. Voydock and S. Kent, “Security
                 and can be corrected without overhauling the basic                  MechanismsinHigh-Level Network Pro-
                 structure of the protocol. Of course, they are still                tocols”, ACM Computing Surveys, v. 5,
                 worth ﬁxing.                                                        n. 2, June 1983, pp. 135–171.
                 SSL 2.0 was subject to quite a number of active          [PCT95]    J. Benaloh, B. Lampson, D. Simon, T.
                 attacks on its record layer and key-exchange pro-                   Spies, and B. Yee, “Microsoft Corpora-
                 tocol.  SSL 3.0 plugs those gaping holes and thus                   tion’s PCT Protocol”, October 1995, In-
                 is considerably more secure against active attacks.                 ternet Draft, work in progress.
                 SSL 3.0 also provides much better message integrity      [RSA93]    RSA Data Security, Inc., “Public-Key
                 protection in export-weakened modes—the common                      Cryptography Standards (PKCS),” Nov
                 case—than SSL 2.0 did: SSL 2.0 provided only 40-                    93.
                 bit MACs in those modes, while SSL 3.0 always uses
                 128-bit MACs. Finally, SSL 3.0 improves a number         [Sch96]    B. Schneier, Applied Cryptography, 2nd
                 of non-security aspects of SSL, such as ﬂexible sup-                Edition, John Wiley & Sons, 1996.
                 port for a wide variety of cryptographic algorithms.
                 It seems fair to conclude that SSL 3.0 qualiﬁes as a     [Yee96]    B. Yee, personal communication, June
                 signiﬁcant improvement over SSL 2.0.                                1996.
                 In short, while there are still a few technical wrin-
                 kles to iron out, on the whole SSL 3.0 is a valuable
                 step toward practical communications security for
                 Internet applications.
                 6 Acknowledgements
                 WeareindebtedtoPaulKocher,whoprovidedmany
                 valuable comments and corrections. Of course, any
                 mistakes are solely our responsibility.
                 References
                 [BCK96]     M. Bellare,     R.   Canetti,   and H.
                             Krawczyk, “Keying Hash Functions for
                             Message Authentication,” Advances in
                             Cryptology—CRYPTO ’96 Proceedings,
                             Springer-Verlag, 1996, pp. 1–15.
                 [Bel96]     S. Bellovin, “Problem Areas for the
                             IP Security Protocols”, Proceedings of
                             the Sixth USENIX Security Symposium,
                             Usenix Association, 1996, pp. 205–214.
                             ftp://ftp.research.att.com/dist/
                             smb/badesp.ps.
